/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as CreateTripRouteImport } from './routes/create-trip'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TripTravelIdRouteImport } from './routes/trip/$travelId'
import { Route as InviteTokenRouteImport } from './routes/invite/$token'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as TripTravelIdIndexRouteImport } from './routes/trip/$travelId/index'
import { Route as TripTravelIdMembersRouteImport } from './routes/trip/$travelId/members'
import { Route as TripTravelIdLocationsRouteImport } from './routes/trip/$travelId/locations'
import { Route as TripTravelIdFlightsRouteImport } from './routes/trip/$travelId/flights'
import { Route as TripTravelIdAccommodationsRouteImport } from './routes/trip/$travelId/accommodations'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api.$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api.rpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'

const rootServerRouteImport = createServerRootRoute()

const CreateTripRoute = CreateTripRouteImport.update({
  id: '/create-trip',
  path: '/create-trip',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TripTravelIdRoute = TripTravelIdRouteImport.update({
  id: '/trip/$travelId',
  path: '/trip/$travelId',
  getParentRoute: () => rootRouteImport,
} as any)
const InviteTokenRoute = InviteTokenRouteImport.update({
  id: '/invite/$token',
  path: '/invite/$token',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const TripTravelIdIndexRoute = TripTravelIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TripTravelIdRoute,
} as any)
const TripTravelIdMembersRoute = TripTravelIdMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => TripTravelIdRoute,
} as any)
const TripTravelIdLocationsRoute = TripTravelIdLocationsRouteImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => TripTravelIdRoute,
} as any)
const TripTravelIdFlightsRoute = TripTravelIdFlightsRouteImport.update({
  id: '/flights',
  path: '/flights',
  getParentRoute: () => TripTravelIdRoute,
} as any)
const TripTravelIdAccommodationsRoute =
  TripTravelIdAccommodationsRouteImport.update({
    id: '/accommodations',
    path: '/accommodations',
    getParentRoute: () => TripTravelIdRoute,
  } as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create-trip': typeof CreateTripRoute
  '/auth/login': typeof AuthLoginRoute
  '/invite/$token': typeof InviteTokenRoute
  '/trip/$travelId': typeof TripTravelIdRouteWithChildren
  '/trip/$travelId/accommodations': typeof TripTravelIdAccommodationsRoute
  '/trip/$travelId/flights': typeof TripTravelIdFlightsRoute
  '/trip/$travelId/locations': typeof TripTravelIdLocationsRoute
  '/trip/$travelId/members': typeof TripTravelIdMembersRoute
  '/trip/$travelId/': typeof TripTravelIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create-trip': typeof CreateTripRoute
  '/auth/login': typeof AuthLoginRoute
  '/invite/$token': typeof InviteTokenRoute
  '/trip/$travelId/accommodations': typeof TripTravelIdAccommodationsRoute
  '/trip/$travelId/flights': typeof TripTravelIdFlightsRoute
  '/trip/$travelId/locations': typeof TripTravelIdLocationsRoute
  '/trip/$travelId/members': typeof TripTravelIdMembersRoute
  '/trip/$travelId': typeof TripTravelIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/create-trip': typeof CreateTripRoute
  '/auth/login': typeof AuthLoginRoute
  '/invite/$token': typeof InviteTokenRoute
  '/trip/$travelId': typeof TripTravelIdRouteWithChildren
  '/trip/$travelId/accommodations': typeof TripTravelIdAccommodationsRoute
  '/trip/$travelId/flights': typeof TripTravelIdFlightsRoute
  '/trip/$travelId/locations': typeof TripTravelIdLocationsRoute
  '/trip/$travelId/members': typeof TripTravelIdMembersRoute
  '/trip/$travelId/': typeof TripTravelIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create-trip'
    | '/auth/login'
    | '/invite/$token'
    | '/trip/$travelId'
    | '/trip/$travelId/accommodations'
    | '/trip/$travelId/flights'
    | '/trip/$travelId/locations'
    | '/trip/$travelId/members'
    | '/trip/$travelId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create-trip'
    | '/auth/login'
    | '/invite/$token'
    | '/trip/$travelId/accommodations'
    | '/trip/$travelId/flights'
    | '/trip/$travelId/locations'
    | '/trip/$travelId/members'
    | '/trip/$travelId'
  id:
    | '__root__'
    | '/'
    | '/create-trip'
    | '/auth/login'
    | '/invite/$token'
    | '/trip/$travelId'
    | '/trip/$travelId/accommodations'
    | '/trip/$travelId/flights'
    | '/trip/$travelId/locations'
    | '/trip/$travelId/members'
    | '/trip/$travelId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateTripRoute: typeof CreateTripRoute
  AuthLoginRoute: typeof AuthLoginRoute
  InviteTokenRoute: typeof InviteTokenRoute
  TripTravelIdRoute: typeof TripTravelIdRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/api/auth/$' | '/api/rpc/$'
  id: '__root__' | '/api/$' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/create-trip': {
      id: '/create-trip'
      path: '/create-trip'
      fullPath: '/create-trip'
      preLoaderRoute: typeof CreateTripRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/trip/$travelId': {
      id: '/trip/$travelId'
      path: '/trip/$travelId'
      fullPath: '/trip/$travelId'
      preLoaderRoute: typeof TripTravelIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invite/$token': {
      id: '/invite/$token'
      path: '/invite/$token'
      fullPath: '/invite/$token'
      preLoaderRoute: typeof InviteTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/trip/$travelId/': {
      id: '/trip/$travelId/'
      path: '/'
      fullPath: '/trip/$travelId/'
      preLoaderRoute: typeof TripTravelIdIndexRouteImport
      parentRoute: typeof TripTravelIdRoute
    }
    '/trip/$travelId/members': {
      id: '/trip/$travelId/members'
      path: '/members'
      fullPath: '/trip/$travelId/members'
      preLoaderRoute: typeof TripTravelIdMembersRouteImport
      parentRoute: typeof TripTravelIdRoute
    }
    '/trip/$travelId/locations': {
      id: '/trip/$travelId/locations'
      path: '/locations'
      fullPath: '/trip/$travelId/locations'
      preLoaderRoute: typeof TripTravelIdLocationsRouteImport
      parentRoute: typeof TripTravelIdRoute
    }
    '/trip/$travelId/flights': {
      id: '/trip/$travelId/flights'
      path: '/flights'
      fullPath: '/trip/$travelId/flights'
      preLoaderRoute: typeof TripTravelIdFlightsRouteImport
      parentRoute: typeof TripTravelIdRoute
    }
    '/trip/$travelId/accommodations': {
      id: '/trip/$travelId/accommodations'
      path: '/accommodations'
      fullPath: '/trip/$travelId/accommodations'
      preLoaderRoute: typeof TripTravelIdAccommodationsRouteImport
      parentRoute: typeof TripTravelIdRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface TripTravelIdRouteChildren {
  TripTravelIdAccommodationsRoute: typeof TripTravelIdAccommodationsRoute
  TripTravelIdFlightsRoute: typeof TripTravelIdFlightsRoute
  TripTravelIdLocationsRoute: typeof TripTravelIdLocationsRoute
  TripTravelIdMembersRoute: typeof TripTravelIdMembersRoute
  TripTravelIdIndexRoute: typeof TripTravelIdIndexRoute
}

const TripTravelIdRouteChildren: TripTravelIdRouteChildren = {
  TripTravelIdAccommodationsRoute: TripTravelIdAccommodationsRoute,
  TripTravelIdFlightsRoute: TripTravelIdFlightsRoute,
  TripTravelIdLocationsRoute: TripTravelIdLocationsRoute,
  TripTravelIdMembersRoute: TripTravelIdMembersRoute,
  TripTravelIdIndexRoute: TripTravelIdIndexRoute,
}

const TripTravelIdRouteWithChildren = TripTravelIdRoute._addFileChildren(
  TripTravelIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateTripRoute: CreateTripRoute,
  AuthLoginRoute: AuthLoginRoute,
  InviteTokenRoute: InviteTokenRoute,
  TripTravelIdRoute: TripTravelIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
